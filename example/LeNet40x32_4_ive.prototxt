# attention scheme included, this file is prepared for training, it is a little different from pytorch2caffe-generated file
#input: "data1"
#input_dim: 1
#input_dim: 1
#input_dim: 32 # width
#input_dim: 40 # height
name: "LeNet40x32_4"
layer {
  name: "nexquad"
  type: "Data"
  top: "data1"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
	mirror: true		
  }
  data_param {
    source: "/workspace/parkingclassifier-caffe/20200318_data/20200318_data_train_lmdb"
    batch_size: 128
    backend: LMDB
  }
}
layer {
  name: "nexquad"
  type: "Data"
  top: "data1"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
	mirror: true		
  }
  data_param {
    source: "/workspace/parkingclassifier-caffe/20200318_data/20200318_data_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data1"
  top: "conv_blob1"
  convolution_param {
    num_output: 50
    bias_term: true
    kernel_size: 3
    group: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
    dilation: 1
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv_blob1"
  top: "relu_blob1"
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "relu_blob1"
  top: "conv_blob2"
  convolution_param {
    num_output: 50
    bias_term: true    
    kernel_size: 3
    group: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
    dilation: 1
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv_blob2"
  top: "relu_blob2"
}
layer {
  name: "max_pool1"
  type: "Pooling"
  bottom: "relu_blob2"
  top: "max_pool_blob1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2    
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "max_pool_blob1"
  top: "conv_blob3"
  convolution_param {
    num_output: 28
    bias_term: true    
    kernel_size: 3
    group: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
    dilation: 1
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv_blob3"
  top: "relu_blob3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "relu_blob3"
  top: "conv_blob4"
  convolution_param {
    num_output: 28
    bias_term: true    
    kernel_size: 3
    group: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
    dilation: 1
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv_blob4"
  top: "relu_blob4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "max_pool_blob1"
  top: "conv_blob5"
  convolution_param {
    num_output: 28
    bias_term: true    
    kernel_size: 3
    group: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
    dilation: 1
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv_blob5"
  top: "relu_blob5"
}
layer {
  name: "conv6"
  type: "Convolution"
  bottom: "relu_blob5"
  top: "conv_blob6"
  convolution_param {
    num_output: 28
    bias_term: true    
    kernel_size: 3
    group: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
    dilation: 1
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "conv_blob6"
  top: "relu_blob6"
}
layer {
  name: "conv7"
  type: "Convolution"
  bottom: "relu_blob6"
  top: "conv_blob7"
  convolution_param {
    num_output: 28
    bias_term: true    
    kernel_size: 1
    group: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
    dilation: 1
  }
}
layer {
  name: "conv8"
  type: "Convolution"
  bottom: "relu_blob4"
  top: "conv_blob8"
  convolution_param {
    num_output: 28
    bias_term: true    
    kernel_size: 1
    group: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
    dilation: 1
  }
}
layer {
  name: "add1"
  type: "Eltwise"
  bottom: "conv_blob7"
  bottom: "conv_blob8"
  top: "add_blob1"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "add_blob1"
  top: "relu_blob7"
}
#blob9
layer {
  name: "conv9"
  type: "Convolution"
  bottom: "relu_blob7"
  top: "conv_blob9"
  convolution_param {
    num_output: 1
    bias_term: true    
    kernel_size: 1
    group: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
    dilation: 1
  }
}
# after this do sigmoid
# sigmoid layer blob1
layer {
  name: "sigm1"
  bottom: "conv_blob9"
  top: "sigm_blob1"
  type: "Sigmoid"
}
# blob 10
## elementwise multiplication after tile (repeat in pyTorch)
# tile layer blob1
layer {
  name: "tile1"
  type: "Tile"
  bottom: "sigm_blob1"
  top: "tile_blob1"
  tile_param {
    axis : 1   # you want to "repmat" along the your axis [1, xx, 10, 14] => 1,
    tiles : 28 # you want 28 repetitions
  }
}
# elementwise multiplication
layer {
  name: "multi1"
  type: "Eltwise"
  bottom: "tile_blob1" #"sigm_blob1"
  bottom: "max_pool_blob1"
  top: "multi_blob1"
  eltwise_param {
    operation: PROD
  }
}
# pooling layer
layer {
  name: "max_pool2"
  type: "Pooling"
  bottom: "multi_blob1"
  top: "max_pool_blob2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2    
  }
}
#fc1
layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "max_pool_blob2"
  top: "fc_blob1"
  inner_product_param {
    num_output: 256
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "fc_blob1"
  top: "relu_blob5"
}
#fc2
layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "relu_blob5"
  top: "fc_blob2"
  inner_product_param {
    num_output: 84
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc_blob2"
  top: "relu_blob6"
}
#fc3
layer {
  name: "fc3"
  type: "InnerProduct"
  bottom: "relu_blob6"
  top: "fc_blob3"
  inner_product_param {
    num_output: 2
    bias_term: true
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc_blob3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST 
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc_blob3"
  bottom: "label"
  top: "loss"
}
